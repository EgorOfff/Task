# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14enoIRmE_RK4-KE3_StJWb2TB4xSkgum
"""

def infer(weight, path_to_dataset):

  import numpy as np 
  import pandas as pd 
  import shutil
  import os
  import zipfile
  import torch
  import torch.nn as nn
  import cv2
  import matplotlib.pyplot as plt
  import torchvision
  from torch.utils.data import Dataset, DataLoader
  from torch.utils.data.sampler import SubsetRandomSampler
  from torchvision import transforms
  import torch.nn.functional as F
  import copy
  import tqdm
  import time
  import random
  from PIL import Image
  from sklearn.preprocessing import LabelEncoder
  from pathlib import Path

  import albumentations
  from albumentations import pytorch as AT

  img_size = 256

  device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
  model = torchvision.models.resnet152(pretrained=True, progress=True)
  model.fc = nn.Linear(2048, 22)

  model.load_state_dict(torch.load(weight))

  labels_class = ['badminton',
                  'baseball',
                  'basketball',
                  'boxing',
                  'chess',
                  'cricket',
                  'fencing',
                  'football',
                  'formula1',
                  'gymnastics',
                  'hockey',
                  'ice_hockey',
                  'kabaddi',
                  'motogp',
                  'shooting',
                  'swimming',
                  'table_tennis',
                  'tennis',
                  'volleyball',
                  'weight_lifting',
                  'wrestling',
                  'wwe']

  data_transforms = albumentations.Compose([
    albumentations.Resize(img_size, img_size),
    albumentations.Normalize(),
    AT.ToTensor()
    ]) 
  
  model.to(device)
  model.eval()
  df_preds = pd.DataFrame()
  for path in Path(path_to_dataset).iterdir():
    img = cv2.imread(str(path))[:, ::-1]
    img = data_transforms(image=img)['image'].cuda()
    pred = model(img[None])
    
    df_preds = df_preds.append(
        {'image': path.absolute(), 'labels': labels_class[torch.argmax(pred.cpu(), dim=1)]},
        ignore_index=True)
  df_preds.to_csv('/content/submission.csv', index = False)